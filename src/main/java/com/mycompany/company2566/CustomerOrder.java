/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.company2566;

import static com.mycompany.company2566.Item.setGlobalFont;
import java.awt.Font;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.NumberFormat;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.Locale;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;

/**
 *
 * @author Arthit LungYa
 */
public class CustomerOrder extends javax.swing.JFrame {

    /**
     * Creates new form CustomerOrder
     */
    DefaultTableModel tableModel = new DefaultTableModel();
    private Statement statement = null;
    private Connection conn;

    public CustomerOrder() {
        initComponents();
        DatabaseConnector dbConnector = new DatabaseConnector();
        dbConnector.connectDB();
        this.statement = dbConnector.getStatement();
        this.conn = dbConnector.getConnection();
        getEmployeeAndCustomerAndItem();
        JTableHeader tableHeader = dataTable.getTableHeader();
        tableHeader.setFont(new Font("Microsoft Sans Serif", Font.PLAIN, 14));
        Object[] header = {"รหัสสินค้า", "ชื่อสินค้า", "ราคา", "จำนวน", "ยอดขาย"};
        Object[][] data = new Object[0][header.length];
        tableModel.setDataVector(data, header);
        dataTable.setModel(tableModel);
        showCurrentDate();
        showRanOrderNo();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        orderNo = new javax.swing.JTextField();
        orderDate = new javax.swing.JTextField();
        total = new javax.swing.JTextField();
        ButtonNew = new javax.swing.JButton();
        ButtonShow = new javax.swing.JButton();
        ButtonClose = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        dataTable = new javax.swing.JTable();
        customerList = new javax.swing.JComboBox<>();
        employeeList = new javax.swing.JComboBox<>();
        insert = new javax.swing.JButton();
        update = new javax.swing.JButton();
        delete = new javax.swing.JButton();
        CustomerCode = new javax.swing.JTextField();
        EmployeeCode = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        itemCode = new javax.swing.JTextField();
        itemList = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        price = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        sale = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        qty = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        amount = new javax.swing.JTextField();
        newDataItem = new javax.swing.JButton();
        UpdateDataItem = new javax.swing.JButton();
        AddDataItem = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("CustomerOrder");

        jLabel1.setText("No.");

        jLabel2.setText("Date");

        jLabel3.setText("Customer");

        jLabel4.setText("Employee");

        jLabel5.setText("Total");

        orderNo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                orderNoKeyReleased(evt);
            }
        });

        orderDate.setEditable(false);

        total.setEditable(false);

        ButtonNew.setText("New");
        ButtonNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonNewActionPerformed(evt);
            }
        });

        ButtonShow.setText("Show");
        ButtonShow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonShowActionPerformed(evt);
            }
        });

        ButtonClose.setText("Close");
        ButtonClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonCloseActionPerformed(evt);
            }
        });

        dataTable.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 12)); // NOI18N
        jScrollPane1.setViewportView(dataTable);

        customerList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customerListActionPerformed(evt);
            }
        });

        employeeList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                employeeListActionPerformed(evt);
            }
        });

        insert.setText("Insert");
        insert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertActionPerformed(evt);
            }
        });

        update.setText("Update");

        delete.setText("Delete");

        jLabel6.setText("Product");

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel7.setText("Code");

        itemCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                itemCodeKeyPressed(evt);
            }
        });

        itemList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemListActionPerformed(evt);
            }
        });

        jLabel8.setText("Price");

        price.setEditable(false);

        jLabel9.setText("Stock");

        sale.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                saleKeyPressed(evt);
            }
        });

        jLabel10.setText("Sale");

        qty.setEditable(false);

        jLabel11.setText("Amount");

        amount.setEditable(false);

        newDataItem.setText("New");

        UpdateDataItem.setText("Update");

        AddDataItem.setText("Add");
        AddDataItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddDataItemActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(price, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(itemCode, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(40, 40, 40)
                                .addComponent(itemList, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(qty, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel10)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(sale, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(amount, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(newDataItem, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(46, 46, 46)
                        .addComponent(UpdateDataItem, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(47, 47, 47)
                        .addComponent(AddDataItem, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(158, 158, 158)))
                .addContainerGap(32, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(itemCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(itemList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(price, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(sale, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)
                    .addComponent(qty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(amount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addGap(36, 36, 36)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newDataItem)
                    .addComponent(UpdateDataItem)
                    .addComponent(AddDataItem))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(33, 33, 33)
                                .addComponent(jLabel1))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel3)
                                .addComponent(jLabel4)
                                .addComponent(jLabel6)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(39, 39, 39)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(orderNo, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(EmployeeCode, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 127, Short.MAX_VALUE)
                                        .addComponent(CustomerCode, javax.swing.GroupLayout.Alignment.LEADING)))
                                .addGap(37, 37, 37)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addGap(18, 18, 18)
                                        .addComponent(orderDate, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(customerList, 0, 215, Short.MAX_VALUE)
                                    .addComponent(employeeList, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(78, 78, 78)
                        .addComponent(ButtonNew, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(ButtonShow, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(insert, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(update, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(73, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ButtonClose, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 789, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(18, 18, 18)
                                .addComponent(total, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(24, 24, 24))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(orderNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(orderDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(CustomerCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(EmployeeCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(customerList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(employeeList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(total, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ButtonNew)
                    .addComponent(ButtonShow)
                    .addComponent(insert)
                    .addComponent(update)
                    .addComponent(delete))
                .addGap(8, 8, 8)
                .addComponent(ButtonClose)
                .addGap(22, 22, 22))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void getEmployeeAndCustomerAndItem() {
        try {
            String selectQueryEmployee = "SELECT * FROM employee order by employeeCode";
            String selectQueryCustomer = "SELECT * FROM customer order by customerCode";
            String selectQueryItem = "SELECT * FROM item order by itemCode";

            ResultSet resultSetEmployee = statement.executeQuery(selectQueryEmployee);
            while (resultSetEmployee.next()) {
                employeeList.addItem(resultSetEmployee.getString("employeeName"));
            }
            resultSetEmployee.close();

            ResultSet resultSetCustomer = statement.executeQuery(selectQueryCustomer);
            while (resultSetCustomer.next()) {
                customerList.addItem(resultSetCustomer.getString("customerName"));
            }
            resultSetCustomer.close();

            ResultSet resultSetItem = statement.executeQuery(selectQueryItem);
            while (resultSetItem.next()) {
                itemList.addItem(resultSetItem.getString("itemName"));
            }
            resultSetItem.close();
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error retrieving data.", "Error", JOptionPane.ERROR_MESSAGE);
        }
        customerList.setSelectedIndex(-1);
        employeeList.setSelectedIndex(-1);
        itemList.setSelectedIndex(-1);
        CustomerCode.setText(null);
        EmployeeCode.setText(null);
        itemCode.setText(null);
    }

    public void displayEmployeeData() {
        String sql = "select * from employee order by employeeCode asc";
        try {
            ResultSet resultSet = statement.executeQuery(sql);
            ResultSetMetaData metaData = resultSet.getMetaData();
            int columnCount = metaData.getColumnCount();
            Vector<String> columnNames = new Vector<>();
            for (int column = 1; column <= columnCount; column++) {
                columnNames.add(metaData.getColumnName(column));
            }
            DefaultTableModel model = new DefaultTableModel(columnNames, 0);
            while (resultSet.next()) {
                Vector<Object> rowData = new Vector<>();
                for (int i = 1; i <= columnCount; i++) {
                    rowData.add(resultSet.getObject(i));
                }
                model.addRow(rowData);
            }
            dataTable.setModel(model);
            resultSet.close();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }

    private void ButtonNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonNewActionPerformed
        orderNo.setText("");
        orderDate.setText("");
        customerList.setSelectedIndex(0);
        employeeList.setSelectedIndex(0);
        total.setText("");
        orderNo.requestFocus();
    }//GEN-LAST:event_ButtonNewActionPerformed

    private void ButtonShowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonShowActionPerformed

    }//GEN-LAST:event_ButtonShowActionPerformed

    private void ButtonCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonCloseActionPerformed
        int pressed = JOptionPane.showConfirmDialog(null, "Confirm", "Exit ?", JOptionPane.OK_CANCEL_OPTION);
        if (pressed == 0) {
            this.dispose();
        }
    }//GEN-LAST:event_ButtonCloseActionPerformed

    private void orderNoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_orderNoKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {

        }
    }//GEN-LAST:event_orderNoKeyReleased

    private void showRanOrderNo() {
        try {
            String selectQuery = "SELECT MAX(orderNo) + 1 AS maxOrderNo FROM customerorder";
            ResultSet resultSet = statement.executeQuery(selectQuery);
            while (resultSet.next()) {
                orderNo.setText(String.valueOf(resultSet.getInt("maxOrderNo")));
            }
            resultSet.close();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }

    }
    private void AddDataItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddDataItemActionPerformed
        Object selectedValue = itemList.getSelectedItem();
        Object[] data = {itemCode.getText(), selectedValue, price.getText(), qty.getText(), amount.getText()};
        tableModel.addRow(data);
        calculateTotal();
    }//GEN-LAST:event_AddDataItemActionPerformed

    private void itemCodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_itemCodeKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            String selectQuery = "SELECT * FROM item WHERE itemCode =" + itemCode.getText();
            try {
                ResultSet resultSet = statement.executeQuery(selectQuery);
                while (resultSet.next()) {
                    String iCode = resultSet.getString("typeCode");
                    for (int i = 0; i < itemList.getItemCount(); i++) {
                        String item = itemList.getItemAt(i).toString();
                        if (item.startsWith(iCode)) {
                            itemList.setSelectedItem(item);
                            break;
                        }
                    }
                    price.setText(resultSet.getString("price"));
                    qty.setText(resultSet.getString("qty"));
                }
                resultSet.close();
            } catch (SQLException ex) {
            }
        }
    }//GEN-LAST:event_itemCodeKeyPressed

    private void saleKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_saleKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            calculateAmount();
        }
    }//GEN-LAST:event_saleKeyPressed

    private void customerListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customerListActionPerformed
        String getCustomer = (String) customerList.getSelectedItem();
        if (getCustomer != null) {
            try {
                String selectCustomer = "SELECT * FROM customer  WHERE customerName=?";
                try (PreparedStatement preparedStatement = conn.prepareStatement(selectCustomer)) {
                    preparedStatement.setString(1, getCustomer);

                    try (ResultSet resultSet = preparedStatement.executeQuery()) {
                        if (resultSet.next()) {
                            String cCode = resultSet.getString("customerCode");
                            CustomerCode.setText(cCode);
                        }
                    }
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }

    }//GEN-LAST:event_customerListActionPerformed

    private void employeeListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_employeeListActionPerformed
        String getEmployee = (String) employeeList.getSelectedItem();
        if (getEmployee != null) {
            try {
                String selectEmployee = "SELECT * FROM employee  WHERE employeeName=?";
                try (PreparedStatement preparedStatement = conn.prepareStatement(selectEmployee)) {
                    preparedStatement.setString(1, getEmployee);
                    try (ResultSet resultSet = preparedStatement.executeQuery()) {
                        if (resultSet.next()) {
                            String eCode = resultSet.getString("employeeCode");
                            EmployeeCode.setText(eCode);
                        }
                    }
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }

    }//GEN-LAST:event_employeeListActionPerformed

    private void itemListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemListActionPerformed
        String getItem = (String) itemList.getSelectedItem();
        if (getItem != null) {
            try {
                String selectItem = "SELECT * FROM item  WHERE itemName=?";
                try (PreparedStatement preparedStatement = conn.prepareStatement(selectItem)) {
                    preparedStatement.setString(1, getItem);
                    try (ResultSet resultSet = preparedStatement.executeQuery()) {
                        if (resultSet.next()) {
                            String iCode = resultSet.getString("itemCode");
                            itemCode.setText(iCode);
                            String iPrice = resultSet.getString("price");
                            price.setText(iPrice);
                            String iQty = resultSet.getString("qty");
                            qty.setText(iQty);
                        }
                        resultSet.close();
                    }
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
            calculateAmount();
        }
    }//GEN-LAST:event_itemListActionPerformed

    private void insertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertActionPerformed
        try {
            int totalValue = Integer.parseInt(total.getText().replaceAll(",", ""));
            String insert = "INSERT INTO customerorder (orderNo, orderDate, customerCode, employeeCode, total) VALUES ('"
                    + orderNo.getText() + "', '"
                    + orderDate.getText() + "', '"
                    + CustomerCode.getText() + "', '"
                    + EmployeeCode.getText() + "', '"
                    + totalValue + "');";
            statement.executeUpdate(insert);
            JOptionPane.showMessageDialog(null, "เพิ่มข้อมูลเรียบร้อยแล้ว !");
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
//        ButtonNew.doClick();
    }//GEN-LAST:event_insertActionPerformed

    private void showCurrentDate() {
        LocalDate now = LocalDate.now();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
        String formattedDate = now.format(formatter);
        orderDate.setText(formattedDate);
    }

    private void calculateAmount() {
        if (!sale.getText().isEmpty()) {
            try {
                int priceValue = Integer.parseInt(price.getText());
                int saleValue = Integer.parseInt(sale.getText());
                int Total = priceValue * saleValue;
                amount.setText(String.valueOf(Total));
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    private void calculateTotal() {
        int totalSum = 0;
        for (int i = 0; i < dataTable.getRowCount(); i++) {
            try {
                int totalValue = Integer.parseInt(dataTable.getValueAt(i, 4).toString().replaceAll(",", ""));
                totalSum += totalValue;
            } catch (Exception ex) {
            }
        }
        total.setText(NumberFormat.getInstance(Locale.US).format(totalSum));
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CustomerOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CustomerOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CustomerOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CustomerOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        Font microsoftSansSerifFont = new Font("Microsoft Sans Serif", Font.PLAIN, 14);
        setGlobalFont(microsoftSansSerifFont);

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CustomerOrder().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddDataItem;
    private javax.swing.JButton ButtonClose;
    private javax.swing.JButton ButtonNew;
    private javax.swing.JButton ButtonShow;
    private javax.swing.JTextField CustomerCode;
    private javax.swing.JTextField EmployeeCode;
    private javax.swing.JButton UpdateDataItem;
    private javax.swing.JTextField amount;
    private javax.swing.JComboBox<String> customerList;
    private javax.swing.JTable dataTable;
    private javax.swing.JButton delete;
    private javax.swing.JComboBox<String> employeeList;
    private javax.swing.JButton insert;
    private javax.swing.JTextField itemCode;
    private javax.swing.JComboBox<String> itemList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton newDataItem;
    private javax.swing.JTextField orderDate;
    private javax.swing.JTextField orderNo;
    private javax.swing.JTextField price;
    private javax.swing.JTextField qty;
    private javax.swing.JTextField sale;
    private javax.swing.JTextField total;
    private javax.swing.JButton update;
    // End of variables declaration//GEN-END:variables
}
