/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.company2566;

import java.awt.Dimension;
import java.awt.Font;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Collections;
import java.util.Enumeration;
import java.util.Vector;
import javax.swing.AbstractButton;
import javax.swing.ButtonGroup;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Arthit LungYa
 */
public class Employee extends javax.swing.JFrame {

    /**
     * Creates new form Employee
     */
    private Statement statement;
    private Connection conn;
    String genderValue;

    public Employee() {
        initComponents();
        DatabaseConnector dbConnector = new DatabaseConnector();
        dbConnector.connectDB();
        this.statement = dbConnector.getStatement();
        this.conn = dbConnector.getConnection();
        getDepartmentType();
        displayEmployeeData();
        checkGender();
    }

    public static void setGlobalFont(Font font) {
        Enumeration<Object> keys = UIManager.getDefaults().keys();
        while (keys.hasMoreElements()) {
            Object key = keys.nextElement();
            Object value = UIManager.get(key);
            if (value instanceof Font) {
                UIManager.put(key, font);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        groupGender = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        employeeCode = new javax.swing.JTextField();
        employeeName = new javax.swing.JTextField();
        Male = new javax.swing.JRadioButton();
        Female = new javax.swing.JRadioButton();
        department = new javax.swing.JComboBox<>();
        totalSale = new javax.swing.JTextField();
        newButton = new javax.swing.JButton();
        showButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();
        None = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        dataTable = new javax.swing.JTable();
        insert = new javax.swing.JButton();
        update = new javax.swing.JButton();
        delete = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Employee");

        jLabel1.setText("Code");

        jLabel2.setText("Name");

        jLabel3.setText("Sex");

        jLabel4.setText("Department");

        jLabel5.setText("Total Sale");

        employeeCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                employeeCodeKeyPressed(evt);
            }
        });

        groupGender.add(Male);
        Male.setText("Male");

        groupGender.add(Female);
        Female.setText("Female");

        newButton.setText("New");
        newButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newButtonActionPerformed(evt);
            }
        });

        showButton.setText("Show");
        showButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showButtonActionPerformed(evt);
            }
        });

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        groupGender.add(None);
        None.setText("None");

        dataTable.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 12)); // NOI18N
        jScrollPane1.setViewportView(dataTable);

        insert.setText("Insert");
        insert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertActionPerformed(evt);
            }
        });

        update.setText("Update");
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });

        delete.setText("Delete");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(employeeCode, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(employeeName, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(totalSale, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Male, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Female, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(None, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(department, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 544, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(newButton, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(showButton, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(insert, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(update, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(43, 43, 43))))
                .addContainerGap(27, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(employeeCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(employeeName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(Male)
                    .addComponent(Female)
                    .addComponent(None))
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(department, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(totalSale, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newButton)
                    .addComponent(showButton)
                    .addComponent(insert)
                    .addComponent(update)
                    .addComponent(delete))
                .addGap(28, 28, 28)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 343, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(closeButton)
                .addContainerGap(11, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void getDepartmentType() {
        String selectQuery = "SELECT * FROM department order by departmentCode asc";
        try {
            ResultSet resultSet = statement.executeQuery(selectQuery);
            while (resultSet.next()) {
                department.addItem(resultSet.getString("departmentCode") + " " + resultSet.getString("departmentName"));
            }
            resultSet.close();
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error retrieving item data.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    public void displayEmployeeData() {
        String sql = "select * from employee order by employeeCode asc";
        try {
            ResultSet resultSet = statement.executeQuery(sql);
            ResultSetMetaData metaData = resultSet.getMetaData();
            int columnCount = metaData.getColumnCount();
            Vector<String> columnNames = new Vector<>();
            for (int column = 1; column <= columnCount; column++) {
                columnNames.add(metaData.getColumnName(column));
            }
            DefaultTableModel model = new DefaultTableModel(columnNames, 0);
            while (resultSet.next()) {
                Vector<Object> rowData = new Vector<>();
                for (int i = 1; i <= columnCount; i++) {
                    rowData.add(resultSet.getObject(i));
                }
                model.addRow(rowData);
            }
            dataTable.setModel(model);
            resultSet.close();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }

    public void checkGender() {
        if (Male.isSelected()) {
            genderValue = "M";
        } else if (Female.isSelected()) {
            genderValue = "F";
        } else {
            genderValue = "N";
        }
    }
    private void newButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newButtonActionPerformed
        employeeCode.setText("");
        employeeName.setText("");
        clearGenderSelection();
        department.setSelectedIndex(0);
        employeeCode.requestFocus();
        totalSale.setText("");
        employeeCode.requestFocus();
    }//GEN-LAST:event_newButtonActionPerformed

    private void clearGenderSelection() {
        Male.setSelected(false);
        Female.setSelected(false);
        None.setSelected(false);
        groupGender.clearSelection();
    }

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        int pressed = JOptionPane.showConfirmDialog(null, "Confirm", "Exit ?", JOptionPane.OK_CANCEL_OPTION);
        if (pressed == 0) {
            this.dispose();
        }
    }//GEN-LAST:event_closeButtonActionPerformed

    private void showButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showButtonActionPerformed
        try {
            String query = "SELECT employee.employeeCode, employee.employeeName, employee.sex, department.departmentName, employee.totalSale "
                    + "FROM employee "
                    + "JOIN department ON employee.departmentCode = department.departmentCode "
                    + "ORDER BY employee.employeeCode ASC";
            ResultSet resultSet = statement.executeQuery(query);
            StringBuilder message = new StringBuilder("ข้อมูลพนักงาน\n");
            while (resultSet.next()) {
                int Ecode = resultSet.getInt("employeeCode");
                String Ename = resultSet.getString("employeeName");
                String Esex = resultSet.getString("sex");
                String Edepartment = resultSet.getString("departmentName");
                int EtotalSale = resultSet.getInt("totalSale");

                message.append("--------------------------------------------------- ").append("\n");
                message.append("รหัสพนักงาน : ").append(Ecode).append("\n");
                message.append("ชื่อพนักงาน :").append(Ename).append("\n");
                message.append("เพศ : ").append(Esex).append("\n");
                message.append("แผนก : ").append(Edepartment).append("\n");
                message.append("ยอดขายรวม : ").append(EtotalSale).append("\n");
            }
            JTextArea textArea = new JTextArea(message.toString());
            textArea.setFont(new Font("Microsoft Sans Serif", Font.PLAIN, 14)); // Set the font here
            textArea.setEditable(false);
            JScrollPane scrollPane = new JScrollPane(textArea);
            scrollPane.setPreferredSize(new Dimension(400, 300));
            JOptionPane.showMessageDialog(this, scrollPane, "ข้อมูลพนักงาน", JOptionPane.INFORMATION_MESSAGE);
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error retrieving item data.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_showButtonActionPerformed

    private void employeeCodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_employeeCodeKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            try {
                String selectQuery = "SELECT * FROM employee WHERE employeeCode =" + employeeCode.getText();
                ResultSet resultSet = statement.executeQuery(selectQuery);
                while (resultSet.next()) {
                    String genderCode = resultSet.getString("sex");
                    if ("M".equals(genderCode)) {
                        Male.setSelected(true);
                    } else if ("F".equals(genderCode)) {
                        Female.setSelected(true);
                    } else if ("N".equals(genderCode)) {
                        None.setSelected(true);
                    }
                    String Ecode = resultSet.getString("departmentCode");
                    employeeName.setText(resultSet.getString("employeeName"));
                    for (int i = 0; i < department.getItemCount(); i++) {
                        String item = department.getItemAt(i).toString();
                        if (item.startsWith(Ecode)) {
                            department.setSelectedItem(item);
                            break;
                        }
                    }
                    totalSale.setText(resultSet.getString("totalSale"));
                }
                resultSet.close();
            } catch (SQLException ex) {
            }
        }
    }//GEN-LAST:event_employeeCodeKeyPressed

    private void insertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertActionPerformed
        try {
            String insert = "INSERT INTO employee (employeeCode, employeeName, sex, departmentCode, totalSale) VALUES ('"
                    + employeeCode.getText() + "', '"
                    + employeeName.getText() + "', '"
                    + genderValue + "', '"
                    + department.getSelectedItem().toString().substring(0, 2) + "', '"
                    + totalSale.getText() + "');";
            statement.executeUpdate(insert);
            JOptionPane.showMessageDialog(null, "เพิ่มข้อมูลเรียบร้อยแล้ว !");
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        newButton.doClick();
        displayEmployeeData();
    }//GEN-LAST:event_insertActionPerformed

    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed
        String update = "UPDATE employee SET employeeName = '"
                + employeeName.getText()
                + "', sex = '" + genderValue
                + "', departmentCode = '" + department.getSelectedItem().toString().substring(0, 2)
                + "', totalSale = '" + totalSale.getText()
                + "' WHERE employeeCode = '" + employeeCode.getText() + "';";
        try {
            statement.executeUpdate(update);
        } catch (SQLException ex) {
        }
        JOptionPane.showMessageDialog(null, "แก้ไขข้อมูลแผนกเรียบร้อยแล้ว");
        newButton.doClick();
        displayEmployeeData();
    }//GEN-LAST:event_updateActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        int pressed = JOptionPane.showConfirmDialog(null, "ตกลง", "ลบข้อมูล ?", JOptionPane.OK_CANCEL_OPTION);
        if (pressed == 0) {
            String Ecode = employeeCode.getText();
            try {
                String deleteQuery = "DELETE FROM employee WHERE employeeCode = ?";
                PreparedStatement preparedStatement = conn.prepareStatement(deleteQuery);
                preparedStatement.setString(1, Ecode);
                int rowsAffected = preparedStatement.executeUpdate();
                if (rowsAffected > 0) {
                    JOptionPane.showMessageDialog(this, "ลบข้อมูลเรียบร้อยแล้ว.", "แจ้งเตือน", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(this, "ลบข้อมูลไม่สำเร็จ", "แจ้งเตือน", JOptionPane.INFORMATION_MESSAGE);
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
            newButton.doClick();
            displayEmployeeData();
        }
        newButton.doClick();
        displayEmployeeData();
    }//GEN-LAST:event_deleteActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Employee.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Employee.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Employee.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Employee.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        Font microsoftSansSerifFont = new Font("Microsoft Sans Serif", Font.PLAIN, 14);
        setGlobalFont(microsoftSansSerifFont);

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Employee().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton Female;
    private javax.swing.JRadioButton Male;
    private javax.swing.JRadioButton None;
    private javax.swing.JButton closeButton;
    private javax.swing.JTable dataTable;
    private javax.swing.JButton delete;
    private javax.swing.JComboBox<String> department;
    private javax.swing.JTextField employeeCode;
    private javax.swing.JTextField employeeName;
    private javax.swing.ButtonGroup groupGender;
    private javax.swing.JButton insert;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton newButton;
    private javax.swing.JButton showButton;
    private javax.swing.JTextField totalSale;
    private javax.swing.JButton update;
    // End of variables declaration//GEN-END:variables
}
